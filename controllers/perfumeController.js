const Perfume = require("../models/Perfume");
const Brand = require("../models/Brand");
const sendResponse = require("../middleware/responseHandler");

// ‚úÖ [GET] /api/perfumes (H·ªñ TR·ª¢ T√åM KI·∫æM V√Ä L·ªåC)
const getPerfumes = async (req, res) => {
  try {
    const { search, brandId } = req.query;
    const query = {};

    if (brandId) {
      query.brand = brandId;
    }

    if (search) {
      const searchRegex = { $regex: search, $options: "i" };
      query.$or = [{ perfumeName: searchRegex }, { description: searchRegex }];
    }

    const perfumes = await Perfume.find(query).populate("brand", "brandName");

    if (res) {
      return sendResponse(res, 200, true, "Danh s√°ch n∆∞·ªõc hoa", perfumes);
    }
    // D√†nh cho Web Route Controller
    return perfumes;
  } catch (error) {
    if (res) {
      return sendResponse(res, 500, false, "L·ªói server", null, error.message);
    }
    throw error; // cho web route b·∫Øt l·ªói qua next(error)
  }
};
// ‚úÖ [GET] /api/perfumes/:id - L·∫•y chi ti·∫øt 1 perfume
const getPerfumeById = async (req, res) => {
  try {
    const perfume = await Perfume.findById(req.params.id)
      .populate("brand", "brandName")
      .populate({
        path: "comments",
        populate: {
          path: "author",
          model: "Members",
          select: "name",
        },
      });

    if (!perfume) {
      return sendResponse(res, 404, false, "Kh√¥ng t√¨m th·∫•y n∆∞·ªõc hoa");
    }

    return sendResponse(res, 200, true, "Chi ti·∫øt n∆∞·ªõc hoa", perfume);
  } catch (error) {
    return sendResponse(res, 500, false, "L·ªói server", null, error.message);
  }
};

const findPerfume = async (perfumeId) => {
  // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ID
  if (!perfumeId) return null;

  // Logic truy v·∫•n ph·ª©c t·∫°p (populate)
  return await Perfume.findById(perfumeId)
    .populate("brand", "brandName")
    .populate({
      path: "comments",
      populate: {
        path: "author",
        model: "Members",
        select: "name",
      },
    });
};

// üß† [POST] /admin/perfumes ‚Äî T·∫°o m·ªõi perfume (upload ·∫£nh)
const createPerfume = async (req, res, next) => {
  try {
    const {
      perfumeName,
      brandId,
      price,
      volume,
      targetAudience,
      concentration,
      description,
      ingredients,
    } = req.body;

    // üñºÔ∏è Ki·ªÉm tra file upload t·ª´ Multer
    const imagePath = req.file ? `/uploads/${req.file.filename}` : null;

    if (!imagePath) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh t·∫£i l√™n!");
      req.session.message = {
        type: "error",
        text: "Vui l√≤ng t·∫£i l√™n h√¨nh ·∫£nh s·∫£n ph·∫©m!",
      };
      return res.redirect("/admin/manage_perfumes");
    }

    // üß© T·∫°o perfume m·ªõi
    await Perfume.create({
      perfumeName,
      brand: brandId,
      price,
      volume,
      targetAudience,
      concentration,
      description,
      ingredients,
      uri: imagePath,
    });

    console.log("‚úÖ T·∫°o perfume th√†nh c√¥ng:", perfumeName);

    req.session.message = {
      type: "success",
      text: "T·∫°o n∆∞·ªõc hoa m·ªõi th√†nh c√¥ng!",
    };

    return res.redirect("/admin/manage_perfumes");
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o perfume:", error);
    req.session.message = {
      type: "error",
      text: "ƒê√£ x·∫£y ra l·ªói khi t·∫°o n∆∞·ªõc hoa.",
    };
    next(error);
  }
};

// üß† [PUT] /admin/perfumes/:id ‚Äî C·∫≠p nh·∫≠t perfume (c√≥ th·ªÉ upload ·∫£nh m·ªõi)
const updatePerfume = async (req, res, next) => {
  try {
    const { id } = req.params;
    const {
      perfumeName,
      brandId,
      price,
      volume,
      targetAudience,
      concentration,
      description,
      ingredients,
    } = req.body;

    const perfume = await Perfume.findById(id);
    if (!perfume) {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y perfume ID:", id);
      req.session.message = {
        type: "error",
        text: "Kh√¥ng t√¨m th·∫•y n∆∞·ªõc hoa ƒë·ªÉ c·∫≠p nh·∫≠t!",
      };
      return res.redirect("/admin/manage_perfumes");
    }

    // üñºÔ∏è N·∫øu c√≥ file upload th√¨ thay ·∫£nh, ng∆∞·ª£c l·∫°i gi·ªØ ·∫£nh c≈©
    const newImagePath = req.file
      ? `/uploads/${req.file.filename}`
      : perfume.uri;

    // üß© C·∫≠p nh·∫≠t d·ªØ li·ªáu
    perfume.perfumeName = perfumeName;
    perfume.brand = brandId;
    perfume.price = price;
    perfume.volume = volume;
    perfume.targetAudience = targetAudience;
    perfume.concentration = concentration;
    perfume.description = description;
    perfume.ingredients = ingredients;
    perfume.uri = newImagePath;

    await perfume.save();

    console.log("‚úÖ C·∫≠p nh·∫≠t perfume th√†nh c√¥ng:", perfumeName);

    req.session.message = {
      type: "success",
      text: "C·∫≠p nh·∫≠t n∆∞·ªõc hoa th√†nh c√¥ng!",
    };

    return res.redirect("/admin/manage_perfumes");
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t perfume:", error);
    req.session.message = {
      type: "error",
      text: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t n∆∞·ªõc hoa.",
    };
    next(error);
  }
};

// üß† X√≥a perfume
const deletePerfume = async (req, res) => {
  try {
    await Perfume.findByIdAndDelete(req.params.id);
    res.redirect("/admin/manage_perfumes");
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a perfume:", error);
    res.status(500).send("Kh√¥ng th·ªÉ x√≥a perfume");
  }
};

// [Public] T√¨m ki·∫øm perfumes theo t√™n n∆∞·ªõc hoa, m√¥ t·∫£ ho·∫∑c brand
const searchPerfumes = async (req, res) => {
  try {
    const { keyword } = req.query;

    if (!keyword) {
      return sendResponse(res, 400, false, "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm");
    }

    const brands = await require("../models/Brand")
      .find({
        brandName: { $regex: keyword, $options: "i" },
      })
      .select("_id");
    const brandIds = brands.map((brand) => brand._id);

    const searchCondition = {
      $or: [
        { perfumeName: { $regex: keyword, $options: "i" } },
        { description: { $regex: keyword, $options: "i" } },
        { brand: { $in: brandIds } },
      ],
    };

    const perfumes = await Perfume.find(searchCondition).populate(
      "brand",
      "brandName"
    );

    return sendResponse(
      res,
      200,
      true,
      `K·∫øt qu·∫£ t√¨m ki·∫øm cho "${keyword}"`,
      perfumes
    );
  } catch (error) {
    return sendResponse(res, 500, false, "L·ªói server", null, error.message);
  }
};

// [Public] L·∫•y danh s√°ch perfume theo Brand
const getPerfumesByBrand = async (req, res) => {
  try {
    const { brandId } = req.params; // Ki·ªÉm tra xem brandId c√≥ h·ª£p l·ªá kh√¥ng

    if (!brandId) {
      return sendResponse(res, 400, false, "Vui l√≤ng cung c·∫•p ID th∆∞∆°ng hi·ªáu");
    }

    const perfumes = await Perfume.find({ brand: brandId }).populate(
      "brand",
      "brandName"
    );

    if (perfumes.length === 0) {
      return sendResponse(
        res,
        200,
        true,
        "Kh√¥ng t√¨m th·∫•y n∆∞·ªõc hoa n√†o cho th∆∞∆°ng hi·ªáu n√†y",
        []
      );
    }

    return sendResponse(
      res,
      200,
      true,
      `Danh s√°ch n∆∞·ªõc hoa c·ªßa Brand ID: ${brandId}`,
      perfumes
    );
  } catch (error) {
    // X·ª≠ l√Ω n·∫øu brandId kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng ObjectId c·ªßa MongoDB
    if (error.kind === "ObjectId") {
      return sendResponse(res, 400, false, "ID th∆∞∆°ng hi·ªáu kh√¥ng h·ª£p l·ªá");
    }
    return sendResponse(res, 500, false, "L·ªói server", null, error.message);
  }
};

module.exports = {
  getPerfumes,
  getPerfumeById,
  createPerfume,
  updatePerfume,
  deletePerfume,
  searchPerfumes,
  getPerfumesByBrand,
  findPerfume,
};
