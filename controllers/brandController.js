// controllers/brandController.js
const Brand = require("../models/Brand");
const sendResponse = require("../middleware/responseHandler");
const Perfume = require("../models/Perfume");

exports.findAllBrands = async () => {
  try {
    return await Brand.find();
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch th∆∞∆°ng hi·ªáu:", error);
    return [];
  }
};

exports.findBrandById = async (id) => {
  try {
    return await Brand.findById(id);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y th∆∞∆°ng hi·ªáu theo ID:", error);
    return null;
  }
};

// GET ALL BRANDS
exports.getAllBrands = async (req, res, next) => {
  try {
    const brands = await Brand.find({});
    return sendResponse(res, 200, true, "Danh s√°ch th∆∞∆°ng hi·ªáu", brands);
  } catch (err) {
    next(err);
  }
};

// GET BRAND BY ID
exports.getBrandById = async (req, res, next) => {
  try {
    const brand = await Brand.findById(req.params.brandId);
    if (!brand)
      return sendResponse(res, 404, false, "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu");
    return sendResponse(res, 200, true, "L·∫•y th∆∞∆°ng hi·ªáu th√†nh c√¥ng", brand);
  } catch (err) {
    next(err);
  }
};

// CREATE BRAND (API & WEB)
exports.createBrand = async (req, res, next) => {
  try {
    const brand = await Brand.create(req.body); // üí° Logic cho Web Route (Redirect)

    if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
      req.flash("success", "T·∫°o th∆∞∆°ng hi·ªáu m·ªõi th√†nh c√¥ng!");
      return res.redirect("/admin/manage_brands");
    } // ‚öôÔ∏è Logic cho API (JSON Response)

    return sendResponse(res, 201, true, "T·∫°o th∆∞∆°ng hi·ªáu th√†nh c√¥ng", brand);
  } catch (err) {
    let errorMessage = "L·ªói server kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i.";

    if (err.name === "ValidationError") {
      // L·∫•y th√¥ng b√°o l·ªói ƒë·∫ßu ti√™n c·ªßa Mongoose Validation
      errorMessage = Object.values(err.errors)[0].message;
    } else if (err.code === 11000) {
      // L·ªói tr√πng l·∫∑p (Duplicate Key Error)
      errorMessage = "T√™n th∆∞∆°ng hi·ªáu ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.";
    }

    if (err.name === "ValidationError" || err.code === 11000) {
      // üí° Logic cho Web Route (Error Redirect)
      if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
        // üéØ C·∫≠p nh·∫≠t ƒë·ªÉ g·ª≠i th√¥ng b√°o l·ªói c·ª• th·ªÉ
        req.flash("error", errorMessage);
        return res.redirect("/admin/manage_brands");
      } // ‚öôÔ∏è Logic cho API (JSON Error)

      return sendResponse(
        res,
        400,
        false,
        "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
        null,
        err.message
      );
    }
    next(err);
  }
};

// UPDATE BRAND (API & WEB)
exports.updateBrand = async (req, res, next) => {
  try {
    const { brandId } = req.params;
    const brand = await Brand.findByIdAndUpdate(
      brandId,
      { $set: req.body },
      { new: true, runValidators: true }
    );

    if (!brand) {
      // üí° Logic cho Web Route (Error Redirect)
      if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
        // üéØ S·ª≠a th√¥ng b√°o l·ªói
        req.flash("error", "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t!");
        return res.redirect("/admin/manage_brands");
      }

      return sendResponse(
        res,
        404,
        false,
        "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t"
      );
    } // üí° Logic cho Web Route (Redirect)

    if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
      req.flash("success", "C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu th√†nh c√¥ng!");
      return res.redirect("/admin/manage_brands");
    } // ‚öôÔ∏è Logic cho API (JSON Response)

    return sendResponse(
      res,
      200,
      true,
      "C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu th√†nh c√¥ng",
      brand
    );
  } catch (err) {
    let errorMessage = "C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu th·∫•t b·∫°i. D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.";

    if (err.name === "ValidationError") {
      errorMessage = Object.values(err.errors)[0].message;
    } else if (err.code === 11000) {
      errorMessage = "T√™n th∆∞∆°ng hi·ªáu ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.";
    }

    if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
      // üéØ G·ª≠i th√¥ng b√°o l·ªói c·ª• th·ªÉ
      req.flash("error", errorMessage);
      return res.redirect("/admin/manage_brands");
    }

    next(err);
  }
};

// DELETE BRAND (API & WEB)
exports.deleteBrand = async (req, res, next) => {
  try {
    const { brandId } = req.params;

    const relatedDocumentsCount = await Perfume.countDocuments({
      brand: brandId,
    });

    if (relatedDocumentsCount > 0) {
      const errorMessage =
        "Kh√¥ng th·ªÉ x√≥a/·∫©n th∆∞∆°ng hi·ªáu n√†y v√¨ c√≥ s·∫£n ph·∫©m li√™n quan ƒëang s·ª≠ d·ª•ng n√≥.";

      if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
        req.flash("error", errorMessage);
        return res.redirect("/admin/manage_brands");
      }
      return sendResponse(res, 400, false, errorMessage);
    }

    const brand = await Brand.findByIdAndUpdate(
      brandId,
      { isDeleted: true },
      { new: true }
    );

    if (!brand) {
      const notFoundMessage = "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu ƒë·ªÉ x√≥a/·∫©n.";

      if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
        req.flash("error", notFoundMessage);
        return res.redirect("/admin/manage_brands");
      }
      return sendResponse(res, 404, false, notFoundMessage);
    }

    if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
      req.flash("success", "·∫®n/X√≥a m·ªÅm th∆∞∆°ng hi·ªáu th√†nh c√¥ng!");
      return res.redirect("/admin/manage_brands");
    }
    return sendResponse(
      res,
      200,
      true,
      `ƒê√£ ·∫©n/x√≥a m·ªÅm th∆∞∆°ng hi·ªáu ${brand.brandName}`
    );
  } catch (err) {
    if (err.name === "CastError") {
      const castErrorMessage = "ID th∆∞∆°ng hi·ªáu kh√¥ng h·ª£p l·ªá.";

      if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
        req.flash("error", castErrorMessage);
        return res.redirect("/admin/manage_brands");
      }
      return sendResponse(res, 400, false, castErrorMessage);
    }

    next(err);
  }
};
