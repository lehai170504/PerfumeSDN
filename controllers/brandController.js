// controllers/brandController.js
const Brand = require("../models/Brand");
const sendResponse = require("../middleware/responseHandler");

exports.findAllBrands = async () => {
  try {
    return await Brand.find();
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch th∆∞∆°ng hi·ªáu:", error);
    return [];
  }
};

exports.findBrandById = async (id) => {
  try {
    return await Brand.findById(id);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y th∆∞∆°ng hi·ªáu theo ID:", error);
    return null;
  }
};

// GET ALL BRANDS
exports.getAllBrands = async (req, res, next) => {
  try {
    const brands = await Brand.find({});
    return sendResponse(res, 200, true, "Danh s√°ch th∆∞∆°ng hi·ªáu", brands);
  } catch (err) {
    next(err);
  }
};

// GET BRAND BY ID
exports.getBrandById = async (req, res, next) => {
  try {
    const brand = await Brand.findById(req.params.brandId);
    if (!brand)
      return sendResponse(res, 404, false, "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu");
    return sendResponse(res, 200, true, "L·∫•y th∆∞∆°ng hi·ªáu th√†nh c√¥ng", brand);
  } catch (err) {
    next(err);
  }
};

// CREATE BRAND (API & WEB)
exports.createBrand = async (req, res, next) => {
  try {
    const brand = await Brand.create(req.body);

    // üí° Logic cho Web Route (Redirect)
    if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
      req.flash("success", "T·∫°o th∆∞∆°ng hi·ªáu m·ªõi th√†nh c√¥ng!");
      return res.redirect("/admin/manage_brands");
    }

    // ‚öôÔ∏è Logic cho API (JSON Response)
    return sendResponse(res, 201, true, "T·∫°o th∆∞∆°ng hi·ªáu th√†nh c√¥ng", brand);
  } catch (err) {
    if (err.name === "ValidationError" || err.code === 11000) {
      // üí° Logic cho Web Route (Error Redirect)
      if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
        req.flash("error", "T·∫°o th∆∞∆°ng hi·ªáu m·ªõi th·∫•t b·∫°i!");
        return res.redirect("/admin/manage_brands");
      }

      // ‚öôÔ∏è Logic cho API (JSON Error)
      return sendResponse(
        res,
        400,
        false,
        "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
        null,
        err.message
      );
    }
    next(err);
  }
};

// UPDATE BRAND (API & WEB)
exports.updateBrand = async (req, res, next) => {
  try {
    const { brandId } = req.params;
    const brand = await Brand.findByIdAndUpdate(
      brandId,
      { $set: req.body },
      { new: true, runValidators: true }
    );

    if (!brand) {
      // üí° Logic cho Web Route (Error Redirect)
      if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
        req.flash("error", "C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu th·∫•t b·∫°i!");
        return res.redirect("/admin/manage_brands");
      }

      return sendResponse(
        res,
        404,
        false,
        "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t"
      );
    }

    // üí° Logic cho Web Route (Redirect)
    if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
      req.flash("success", "C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu th√†nh c√¥ng!");
      return res.redirect("/admin/manage_brands");
    }

    // ‚öôÔ∏è Logic cho API (JSON Response)
    return sendResponse(
      res,
      200,
      true,
      "C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu th√†nh c√¥ng",
      brand
    );
  } catch (err) {
    next(err);
  }
};

// DELETE BRAND (API & WEB)
exports.deleteBrand = async (req, res, next) => {
  try {
    const { brandId } = req.params;
    const brand = await Brand.findByIdAndDelete(brandId);

    if (!brand) {
      if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
        req.flash("error", "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu ƒë·ªÉ x√≥a.");
        return res.redirect("/admin/manage_brands");
      }
      return sendResponse(res, 404, false, "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu ƒë·ªÉ x√≥a");
    }

    if (req.originalUrl.includes("/admin/brands") && !req.headersSent) {
      req.flash("success", "X√≥a th∆∞∆°ng hi·ªáu th√†nh c√¥ng!");
      return res.redirect("/admin/manage_brands");
    }
    return sendResponse(
      res,
      200,
      true,
      `ƒê√£ x√≥a th∆∞∆°ng hi·ªáu ${brand.brandName}`
    );
  } catch (err) {
    next(err);
  }
};
