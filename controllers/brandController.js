// controllers/brandController.js
const Brand = require("../models/Brand");
const sendResponse = require("../middleware/responseHandler");

/* ===================================================
 * üß† SHARED LOGIC ‚Äî d√πng ƒë∆∞·ª£c cho EJS & API
 * =================================================== */
exports.findAllBrands = async () => {
  try {
    return await Brand.find();
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch th∆∞∆°ng hi·ªáu:", error);
    return [];
  }
};

exports.findBrandById = async (id) => {
  try {
    return await Brand.findById(id);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y th∆∞∆°ng hi·ªáu theo ID:", error);
    return null;
  }
};

/* ===================================================
 * ‚öôÔ∏è API CONTROLLERS ‚Äî d√πng cho Swagger / API routes
 * =================================================== */

// GET ALL BRANDS
exports.getAllBrands = async (req, res, next) => {
  try {
    const brands = await Brand.find({});
    return sendResponse(res, 200, true, "Danh s√°ch th∆∞∆°ng hi·ªáu", brands);
  } catch (err) {
    next(err);
  }
};

// GET BRAND BY ID
exports.getBrandById = async (req, res, next) => {
  try {
    const brand = await Brand.findById(req.params.brandId);
    if (!brand)
      return sendResponse(res, 404, false, "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu");
    return sendResponse(res, 200, true, "L·∫•y th∆∞∆°ng hi·ªáu th√†nh c√¥ng", brand);
  } catch (err) {
    next(err);
  }
};

// CREATE BRAND (API)
exports.createBrand = async (req, res, next) => {
  try {
    const brand = await Brand.create(req.body);
    return sendResponse(res, 201, true, "T·∫°o th∆∞∆°ng hi·ªáu th√†nh c√¥ng", brand);
  } catch (err) {
    if (err.name === "ValidationError" || err.code === 11000) {
      return sendResponse(
        res,
        400,
        false,
        "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
        null,
        err.message
      );
    }
    next(err);
  }
};

// UPDATE BRAND (API)
exports.updateBrand = async (req, res, next) => {
  try {
    const { brandId } = req.params;
    const brand = await Brand.findByIdAndUpdate(
      brandId,
      { $set: req.body },
      { new: true, runValidators: true }
    );

    if (!brand)
      return sendResponse(
        res,
        404,
        false,
        "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t"
      );

    return sendResponse(
      res,
      200,
      true,
      "C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu th√†nh c√¥ng",
      brand
    );
  } catch (err) {
    if (err.name === "ValidationError" || err.code === 11000) {
      return sendResponse(
        res,
        400,
        false,
        "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
        null,
        err.message
      );
    }
    next(err);
  }
};

// DELETE BRAND (API)
exports.deleteBrand = async (req, res, next) => {
  try {
    const { brandId } = req.params;
    const brand = await Brand.findByIdAndDelete(brandId);

    if (!brand)
      return sendResponse(res, 404, false, "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu ƒë·ªÉ x√≥a");

    return sendResponse(
      res,
      200,
      true,
      `ƒê√£ x√≥a th∆∞∆°ng hi·ªáu ${brand.brandName}`
    );
  } catch (err) {
    next(err);
  }
};

/* ===================================================
 * üß© EJS ADMIN CONTROLLERS ‚Äî c√≥ redirect + flash message
 * =================================================== */

// [POST] /admin/brands
exports.createBrandWeb = async (req, res, next) => {
  try {
    const { brandName } = req.body;
    if (!brandName || brandName.trim() === "") {
      req.session.message = {
        type: "error",
        text: "T√™n th∆∞∆°ng hi·ªáu kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
      };
      return res.redirect("/admin/manage_brands");
    }

    await Brand.create({ brandName });
    console.log("‚úÖ T·∫°o th∆∞∆°ng hi·ªáu:", brandName);

    req.session.message = {
      type: "success",
      text: "T·∫°o th∆∞∆°ng hi·ªáu m·ªõi th√†nh c√¥ng!",
    };
    return res.redirect("/admin/manage_brands");
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o th∆∞∆°ng hi·ªáu:", error);
    req.session.message = {
      type: "error",
      text: "ƒê√£ x·∫£y ra l·ªói khi t·∫°o th∆∞∆°ng hi·ªáu.",
    };
    next(error);
  }
};

// [PUT] /admin/brands/:id
exports.updateBrandWeb = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { brandName } = req.body;

    const brand = await Brand.findById(id);
    if (!brand) {
      req.session.message = {
        type: "error",
        text: "Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t!",
      };
      return res.redirect("/admin/manage_brands");
    }

    brand.brandName = brandName;
    await brand.save();

    console.log("‚úÖ C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu:", brandName);
    req.session.message = {
      type: "success",
      text: "C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu th√†nh c√¥ng!",
    };
    return res.redirect("/admin/manage_brands");
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu:", error);
    req.session.message = {
      type: "error",
      text: "L·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu.",
    };
    next(error);
  }
};

// [DELETE] /admin/brands/:id
exports.deleteBrandWeb = async (req, res, next) => {
  try {
    const { id } = req.params;
    await Brand.findByIdAndDelete(id);

    console.log("üóëÔ∏è ƒê√£ x√≥a th∆∞∆°ng hi·ªáu:", id);
    req.session.message = {
      type: "success",
      text: "X√≥a th∆∞∆°ng hi·ªáu th√†nh c√¥ng!",
    };
    return res.redirect("/admin/manage_brands");
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a th∆∞∆°ng hi·ªáu:", error);
    req.session.message = { type: "error", text: "Kh√¥ng th·ªÉ x√≥a th∆∞∆°ng hi·ªáu." };
    next(error);
  }
};
